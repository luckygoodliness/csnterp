<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd

        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
    <aop:aspectj-autoproxy/>

    <context:annotation-config/>

    <!-- 注解扫描包 -->
    <context:component-scan base-package="com.csnt"/>

    <context:property-placeholder location="classpath*:/database.properties"/>

    <bean id="dataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean" init-method="init"
          destroy-method="close">
        <property name="uniqueResourceName" value="dataSource"/>
        <property name="xaDataSourceClassName">
            <value>${jdbc.driver}</value>
        </property>
        <property name="xaProperties">
            <props>
                <prop key="user">${jdbc.username}</prop>
                <prop key="password">${jdbc.password}</prop>
                <prop key="URL">${jdbc.url}</prop>
            </props>
        </property>
        <property name="minPoolSize">
            <value>${jdbc.minPoolSize}</value>
        </property>
        <property name="maxPoolSize">
            <value>${jdbc.maxPoolSize}</value>
        </property>
        <!--连接最大存活时间，超过这个且没有正在使用的连接将自动销毁,0无限制，1000 =1000s-->
        <property name="maxLifetime" value="0"/>
        <!--java数据库连接池，最大可等待获取datasouce的时间-->
        <property name="loginTimeout" value="0"/>
        <!--获取连接失败重新获等待最大时间，在这个时间内如果有可用连接，将返回-->
        <property name="borrowConnectionTimeout" value="30"/>
        <!--连接回收时间-->
        <property name="maintenanceInterval" value="60"/>
        <!--最大闲置时间，超过最小连接池连接的连接将将关闭-->
        <property name="maxIdleTime" value="0"/>
        <!--最大获取数据时间，如果不设置这个值，Atomikos使用默认的5分钟，那么在处理大批量数据读取的时候，一旦超过5分钟，就会抛出类似 Resultset is close 的错误.-->
        <property name="reapTimeout" value="0"/>
    </bean>

    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan">
            <list>
                <value>com.csnt</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">com.csnt.scdp.framework.core.persistence.dialet.OracleDialect</prop>
                <prop key="hibernate.jdbc.fetch_size">500</prop>
                <prop key="hibernate.jdbc.batch_size">500</prop>
                <prop key="hibernate.connection.autoReconnect">true</prop>
                <prop key="hibernate.connection.autoReconnectForPools">true</prop>
                <prop key="hibernate.connection.is-connection-validation-required">true</prop>
                <prop key="hibernate.connection.isolation">2</prop>
                <prop key="hibernate.connection.autocommit">false</prop>
                <prop key="hibernate.connection.release_mode">auto</prop>
                <prop key="hibernate.order_inserts">true</prop>
                <prop key="hibernate.order_updates">true</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.format_sql">false</prop>
                <prop key="hibernate.cache.use_second_level_cache">false</prop>
                <prop key="hibernate.cache.use_query_cache">false</prop>
                <prop key="hibernate.generate_statistics">true</prop>

                <!--JTA-->
                <prop key="hibernate.transaction.factory_class">
                    org.hibernate.engine.transaction.internal.jta.CMTTransactionFactory
                </prop>
                <prop key="hibernate.transaction.jta.platform">
                    com.atomikos.icatch.jta.hibernate4.AtomikosJ2eePlatform
                </prop>
                <prop key="hibernate.current_session_context_class">jta</prop>
            </props>
        </property>
        <property name="jtaTransactionManager" ref="transactionManager"/>
    </bean>


    <bean id="userTransactionService" class="com.atomikos.icatch.config.UserTransactionServiceImp"
          init-method="init" destroy-method="shutdownForce">
        <constructor-arg>
            <props>
                <prop key="com.atomikos.icatch.service">
                    com.atomikos.icatch.standalone.UserTransactionServiceFactory
                </prop>
                <prop key="com.atomikos.icatch.default_jta_timeout">30000</prop>
                <prop key="com.atomikos.icatch.log_base_dir">../logs/</prop>
                <prop key="com.atomikos.icatch.force_shutdown_on_vm_exit">true</prop>
            </props>
        </constructor-arg>
    </bean>

    <bean id="atomikosTransactionManager"
          class="com.atomikos.icatch.jta.UserTransactionManager"
          init-method="init" destroy-method="close"
          depends-on="userTransactionService">
        <property name="startupTransactionService" value="true"/>
        <property name="forceShutdown" value="false"/>
    </bean>

    <bean id="atomikosUserTransaction"
          class="com.atomikos.icatch.jta.UserTransactionImp"
          depends-on="userTransactionService">
        <property name="transactionTimeout" value="${jdbc.transactionTimeout}"/>
    </bean>

    <bean id="transactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
        <property name="transactionManager" ref="atomikosTransactionManager"/>
        <property name="userTransaction" ref="atomikosUserTransaction"/>
        <property name="allowCustomIsolationLevels" value="true"/>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="cacheImpl" class="com.csnt.scdp.framework.core.cache.impl.LocalCacheImpl" scope="prototype"/>
    <bean id="userInfoImpl" class="com.csnt.scdp.sysmodules.modules.sys.user.services.impl.ScdpUserInfoImpl"/>
    <bean id="sysModuleInitListener" class="com.csnt.scdp.sysmodules.listener.InitListener"/>
    <bean id="scdpUserValidator" class="com.csnt.scdp.sysmodules.modules.sys.user.services.impl.ScdpUserValidator"/>

</beans>
